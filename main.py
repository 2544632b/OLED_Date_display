import machine
import ssd1306
import framebuf
import time
from machine import RTC

rtc = RTC()
rtc.datetime((2033, 10, 2, 1, 19, 54, 0, 0)) # set a specific date and tim

# 14 & 15 -> GP14 & GP15
i2c = machine.I2C(1, sda=machine.Pin(14), scl=machine.Pin(15), freq=400000)
oled = ssd1306.SSD1306_I2C(128, 64, i2c)

data_mor = [0x00, 0x00, 0x02, 0x00, 
    0x1f, 0xf0, 0x02, 0x00, 
    0x10, 0x10, 0x02, 0x00, 
    0x10, 0x10, 0x02, 0x00, 
    0x1f, 0xf0, 0x02, 0x00, 
    0x10, 0x10, 0x02, 0x00, 
    0x10, 0x10, 0x03, 0xf8, 
    0x1f, 0xf0, 0x02, 0x00, 
    0x01, 0x00, 0x02, 0x00, 
    0x01, 0x00, 0x02, 0x00, 
    0xff, 0xfe, 0x02, 0x00, 
    0x01, 0x00, 0x02, 0x00, 
    0x01, 0x00, 0x02, 0x00, 
    0x01, 0x00, 0x02, 0x00, 
    0x01, 0x00, 0xff, 0xfe, 
    0x01, 0x00, 0x00, 0x00]

data_mon = [0x01, 0x00, 0x08, 0x00, 
    0x01, 0x00, 0x08, 0x00, 
    0x01, 0x00, 0x08, 0x00, 
    0x01, 0x00, 0x1f, 0xf8, 
    0x3f, 0xf8, 0x11, 0x00, 
    0x21, 0x08, 0x21, 0x00, 
    0x21, 0x08, 0x41, 0x00, 
    0x21, 0x08, 0x01, 0x00, 
    0x21, 0x08, 0x01, 0x00, 
    0x21, 0x08, 0xff, 0xfe, 
    0x3f, 0xf8, 0x01, 0x00, 
    0x21, 0x08, 0x01, 0x00, 
    0x01, 0x00, 0x01, 0x00, 
    0x01, 0x00, 0x01, 0x00, 
    0x01, 0x00, 0x01, 0x00, 
    0x01, 0x00, 0x01, 0x00]

data_afn = [0x00, 0x00, 0x08, 0x00, 
    0xff, 0xfe, 0x08, 0x00, 
    0x02, 0x00, 0x08, 0x00, 
    0x02, 0x00, 0x1f, 0xf8, 
    0x02, 0x00, 0x11, 0x00, 
    0x02, 0x00, 0x21, 0x00, 
    0x02, 0x40, 0x41, 0x00, 
    0x02, 0x20, 0x01, 0x00, 
    0x02, 0x10, 0x01, 0x00, 
    0x02, 0x08, 0xff, 0xfe, 
    0x02, 0x08, 0x01, 0x00, 
    0x02, 0x00, 0x01, 0x00, 
    0x02, 0x00, 0x01, 0x00, 
    0x02, 0x00, 0x01, 0x00, 
    0x02, 0x00, 0x01, 0x00, 
    0x02, 0x00, 0x01, 0x00]

data_nig = [0x00, 0x80, 0x02, 0x00, 
    0x00, 0x80, 0x02, 0x00, 
    0x79, 0xf8, 0x02, 0x00, 
    0x4a, 0x08, 0x02, 0x00, 
    0x4c, 0x10, 0x02, 0x00, 
    0x4b, 0xfc, 0x02, 0x00, 
    0x4a, 0x44, 0x03, 0xf8, 
    0x7a, 0x44, 0x02, 0x00, 
    0x4a, 0x44, 0x02, 0x00, 
    0x4b, 0xfc, 0x02, 0x00, 
    0x48, 0xa0, 0x02, 0x00, 
    0x48, 0xa0, 0x02, 0x00, 
    0x79, 0x22, 0x02, 0x00, 
    0x49, 0x22, 0x02, 0x00, 
    0x02, 0x1e, 0xff, 0xfe, 
    0x04, 0x00, 0x00, 0x00]

number = {
    0: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x18, 0x00, 
    0x24, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x24, 0x00, 
    0x18, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    1: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x08, 0x00, 
    0x38, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x3e, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    2: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x3c, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x02, 0x00, 
    0x04, 0x00, 
    0x08, 0x00, 
    0x10, 0x00, 
    0x20, 0x00, 
    0x42, 0x00, 
    0x7e, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    3: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x3c, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x02, 0x00, 
    0x04, 0x00, 
    0x18, 0x00, 
    0x04, 0x00, 
    0x02, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x3c, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    4: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x04, 0x00, 
    0x0c, 0x00, 
    0x0c, 0x00, 
    0x14, 0x00, 
    0x24, 0x00, 
    0x24, 0x00, 
    0x44, 0x00, 
    0x7f, 0x00, 
    0x04, 0x00, 
    0x04, 0x00, 
    0x1f, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    5: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x7e, 0x00, 
    0x40, 0x00, 
    0x40, 0x00, 
    0x40, 0x00, 
    0x78, 0x00, 
    0x44, 0x00, 
    0x02, 0x00, 
    0x02, 0x00, 
    0x42, 0x00, 
    0x44, 0x00, 
    0x38, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    6: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x18, 0x00, 
    0x24, 0x00, 
    0x40, 0x00, 
    0x40, 0x00, 
    0x5c, 0x00, 
    0x62, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x22, 0x00, 
    0x1c, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    7: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x7e, 0x00, 
    0x42, 0x00, 
    0x04, 0x00, 
    0x04, 0x00, 
    0x08, 0x00, 
    0x08, 0x00, 
    0x10, 0x00, 
    0x10, 0x00, 
    0x10, 0x00, 
    0x10, 0x00, 
    0x10, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    8: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x3c, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x24, 0x00, 
    0x18, 0x00, 
    0x24, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x3c, 0x00, 
    0x00, 0x00, 
    0x00, 0x00],
    
    9: [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x38, 0x00, 
    0x44, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x42, 0x00, 
    0x46, 0x00, 
    0x3a, 0x00, 
    0x02, 0x00, 
    0x02, 0x00, 
    0x24, 0x00, 
    0x18, 0x00, 
    0x00, 0x00, 
    0x00, 0x00] 
}

dot = [0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x18, 0x00, 
    0x18, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x18, 0x00, 
    0x18, 0x00, 
    0x00, 0x00, 
    0x00, 0x00]

def bfRenderNumber(dwHours, dwMinute, x, y, bShowCenter):
    if x >= 128:
        x = 0
    
    time = 0
    pos = divmod(dwHours, 10)
    for i in pos:
        buf = framebuf.FrameBuffer(bytearray(number[i]), 10, 16, framebuf.MONO_HLSB)
        oled.blit(buf, x + time, y)
        time += 10
    
    if bShowCenter == True:
        buf = framebuf.FrameBuffer(bytearray(dot), 10, 16, framebuf.MONO_HLSB)
        oled.blit(buf, x + time, y - 1)
    
    time += 10
    
    pos = divmod(dwMinute, 10)
    for i in pos:
        buf = framebuf.FrameBuffer(bytearray(number[i]), 10, 16, framebuf.MONO_HLSB)
        oled.blit(buf, x + time, y)
        time += 10

while True:
    struct = time.localtime(time.time())

    if struct[3] >= 5 and struct[3] < 12:
        buf = framebuf.FrameBuffer(bytearray(data_mor), 32, 16, framebuf.MONO_HLSB)
        oled.blit(buf, 5,  5)
        
    if struct[3] == 12:
        buf = framebuf.FrameBuffer(bytearray(data_mon), 32, 16, framebuf.MONO_HLSB)
        oled.blit(buf, 5,  5)
    
    if struct[3] >= 13 and struct[3] < 18:
        buf = framebuf.FrameBuffer(bytearray(data_afn), 32, 16, framebuf.MONO_HLSB)
        oled.blit(buf, 5,  5)
    
    if struct[3] >= 18 and struct[3] <= 23:
        buf = framebuf.FrameBuffer(bytearray(data_nig), 32, 16, framebuf.MONO_HLSB)
        oled.blit(buf, 5,  5)
    
    bfRenderNumber(struct[3], struct[4], 70, 40, True)
    
    #text = "{:02d}".format(struct[4])
    #oled.text(str(struct[3]) + ":" + text, 5, 5)
    #oled.text(str(struct[0]) + "-" + str(struct[1]) + "-" + str(struct[2]) + " " + str(struct[3]) + ":" + str(struct[4]), 5, 50)
    oled.show()
    oled.fill(0)
